import type { NextFunction, Request, Response } from "express";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import { loginUser, registerUser } from "./userControllers";
import type { UserStructure } from "../../database/models/User";
import User from "../../database/models/User";
import CustomError from "../../CustomError/CustomError";
import mongoose from "mongoose";
import type { Credentials } from "./types";

beforeEach(() => {
  jest.clearAllMocks();
});

const res: Partial<Response> = {
  status: jest.fn().mockReturnThis(),
  json: jest.fn(),
};

const next = jest.fn();

describe("Given a register controller", () => {
  const user: UserStructure = {
    password: "1234",
    email: "mireia@gmail.com",
    name: "mireia",
    gender: "f",
    level: 2,
  };

  const req: Partial<Request> = {
    body: user,
  };

  describe("When it receives an email 'mireia@gmail.com' and a password '1234''", () => {
    test("Then it should invoke its method status with 201 and its method json with the user id and the email", async () => {
      const expectedStatus = 201;
      const hashedPassword = "hashedpassword";
      req.body = user;
      const id = new mongoose.Types.ObjectId();

      bcrypt.hash = jest.fn().mockResolvedValue(hashedPassword);

      User.create = jest.fn().mockResolvedValue({
        email: user.email,
        password: hashedPassword,
        name: user.name,
        gender: user.gender,
        level: user.level,
        _id: id,
      });

      await registerUser(req as Request, res as Response, next as NextFunction);

      expect(res.status).toHaveBeenCalledWith(expectedStatus);
      expect(res.json).toHaveBeenCalledWith({
        id,
        email: user.email,
        name: user.name,
        gender: user.gender,
        level: user.level,
      });
    });
  });

  describe("When it receives an email 'mireia@gmail.com' that already exists", () => {
    test("Then it should next with status 409 and a public message 'User already registered'", async () => {
      const error = new CustomError(
        "Duplicate key",
        409,
        "User is already registered"
      );

      User.create = jest.fn().mockRejectedValueOnce(error);

      await registerUser(req as Request, res as Response, next as NextFunction);

      expect(next).toHaveBeenCalledWith(error);
    });
  });

  describe("When it receives a request with email 'mireia@gmail.com', password '12345678' and bcrypt rejects", () => {
    test("Then next should be invoked with the error generated by bcrypt", async () => {
      req.body = user;
      const bcryptError = new Error();
      bcrypt.hash = jest.fn().mockRejectedValue(bcryptError);

      await registerUser(req as Request, null, next as NextFunction);

      expect(next).toHaveBeenCalledWith(bcryptError);
    });
  });
});

describe("Given a loginUser controller", () => {
  const loginBody: Credentials = {
    email: "admin@admin.com",
    password: "admin123",
  };

  const req: Partial<Request> = {
    body: loginBody,
  };

  describe("When it receives a request with an invalid username", () => {
    test("Then it should invoke the next function with a username error", async () => {
      User.findOne = jest.fn().mockResolvedValueOnce(null);
      const usernameError = new CustomError(
        "Username not found",
        401,
        "Wrong credentials"
      );

      await loginUser(req as Request, res as Response, next as NextFunction);

      expect(next).toBeCalledWith(usernameError);
    });
  });

  describe("When it receives a valid email 'admin@admin.com' and the wrong password", () => {
    test("Then it should invoke the next function with a password error", async () => {
      User.findOne = jest.fn().mockResolvedValueOnce(loginBody);
      const passwordError = new CustomError(
        "Incorrect password",
        401,
        "Wrong credentials"
      );

      bcrypt.compare = jest.fn().mockResolvedValueOnce(false);

      await loginUser(req as Request, res as Response, next as NextFunction);

      expect(next).toBeCalledWith(passwordError);
    });
  });

  describe("when it receives a valid email 'admin@admin.com' and a valid password 'admin123'", () => {
    test("Then it should invoke the response method with a 200 status and its json method with a token", async () => {
      const user = {
        email: "admin@admin.com",
        password: "admin123",
      };
      const userId = new mongoose.Types.ObjectId();
      const expectedStatus = 200;
      req.body = user;

      const token = jwt.sign({}, "secret");

      User.findOne = jest.fn().mockResolvedValueOnce({ ...user, _id: userId });
      bcrypt.compare = jest.fn().mockResolvedValueOnce(true);
      jwt.sign = jest.fn().mockReturnValueOnce(token);

      await loginUser(req as Request, res as Response, null);

      expect(res.status).toHaveBeenCalledWith(expectedStatus);
      expect(res.json).toHaveBeenCalledWith({ token });
    });
  });

  describe("when it receives a request with an empty body", () => {
    test("Then it should call next with a Custom Error with public message 'Wrong credentials' and response status 401", async () => {
      User.findOne = jest.fn().mockResolvedValueOnce(null);

      const customError = new CustomError(
        "Username not found",
        401,
        "Wrong credentials"
      );

      const req: Partial<Request> = {
        body: {},
      };

      await loginUser(req as Request, res as Response, next as NextFunction);

      expect(next).toBeCalledWith(customError);
    });
  });
});
